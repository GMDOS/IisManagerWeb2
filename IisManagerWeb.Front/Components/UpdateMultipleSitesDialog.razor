@namespace IisManagerWeb.Front.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Web.Administration
@using MudBlazor
@using IisManagerWeb.Shared.Models
@inject SiteService SiteService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@rendermode RenderMode.InteractiveWebAssembly
@using Microsoft.AspNetCore.Components

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">
            @if (PreSelectedSiteNames != null)
            {
                @("Atualizar Todos os Sites do Grupo")
            }
            else
            {
                @("Atualizar Arquivos em Múltiplos Sites")
            }
        </MudText>
        
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column gap-4">
            <MudPaper Class="pa-4" Elevation="0">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Selecione os sites a serem atualizados:</MudText>
                
                @if (PreSelectedSiteNames != null && PreSelectedSiteNames.Any())
                {
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Sites do grupo que serão atualizados:</MudText>
                    <MudAlert Severity="Severity.Info" Class="mb-3">
                        Todos os @PreSelectedSiteNames.Count sites do grupo serão atualizados simultaneamente.
                    </MudAlert>
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Selecione os sites a serem atualizados:</MudText>
                    
                    if (sites.Count == 0)
                    {
                        <MudProgressCircular Indeterminate="true" />
                    }
                    else
                    {
                        <MudContainer MaxHeight="200px" Style="overflow-y: auto">
                            @foreach (var site in sites)
                            {
                                <MudCheckBox T="bool" @bind-Checked="@site.IsSelected" Label="@site.Name" Color="Color.Primary" />
                            }
                        </MudContainer>
                    }
                }
                
                <MudDivider Class="my-4" />
                
                @if (!folderSelected)
                {
                    <MudText>Selecione a pasta local contendo os arquivos dos sites.</MudText>
                    
                    <div class="d-flex flex-column align-center justify-center mt-4">
                        <MudButton OnClick="SelectFolder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Folder" 
                                  Variant="Variant.Filled" Class="mb-2" Disabled="@(!SelectedSites.Any())">
                            Selecionar pasta
                        </MudButton>
                        
                        @if (!SelectedSites.Any() && PreSelectedSiteNames == null)
                        {
                            <MudText Typo="Typo.caption" Class="mt-1">Selecione pelo menos um site para continuar</MudText>
                        }
                    </div>
                }
                else
                {
                    <MudText>Pasta selecionada: @selectedFolderName</MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">Total de arquivos: @fileCount</MudText>
                    
                    @if (isAnalyzing)
                    {
                        <div class="d-flex flex-column align-center mt-4">
                            <MudProgressCircular Indeterminate="true" />
                            <MudText Class="mt-2">Analisando arquivos...</MudText>
                        </div>
                    }
                    else if (fileCheckResponse != null && fileCheckResponse.FilesToUpdate.Count > 0)
                    {
                        <MudGrid Class="mt-4">
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Info" Class="mb-4">
                                    Foram encontrados @fileCheckResponse.FilesToUpdate.Count arquivos para atualizar em @SelectedSites.Count site(s).
                                </MudAlert>
                                
                                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2">
                                    <MudTabPanel Text="Arquivos para Atualizar">
                                        <MudPaper Class="pa-4" Outlined="true" Elevation="0">
                                            <MudDataGrid T="FileUpdateInfo" 
                                                         Items="@fileCheckResponse.Files.Where(f => !f.IsIgnored).ToList()" 
                                                         Filterable="true" 
                                                         FilterMode="DataGridFilterMode.Simple"
                                                         Dense="true" 
                                                         Bordered="true" 
                                                         Striped="true"
                                                         Hover="true"
                                                         Height="400px">
                                                <Columns>
                                                    <PropertyColumn Property="x => x.RelativePath" Title="Caminho do Arquivo" />
                                                    <TemplateColumn Title="Data Modificação (Cliente)">
                                                        <CellTemplate>
                                                            @(context.Item.ClientFile?.LastModified.ToString("dd/MM/yyyy HH:mm:ss") ?? "-")
                                                        </CellTemplate>
                                                    </TemplateColumn>
                                                    <TemplateColumn Title="Data Modificação (Servidor)">
                                                        <CellTemplate>
                                                            @(context.Item.ServerFile?.LastModified.ToString("dd/MM/yyyy HH:mm:ss") ?? "Não existe")
                                                        </CellTemplate>
                                                    </TemplateColumn>
                                                    <TemplateColumn Title="Motivo da Atualização">
                                                        <CellTemplate>
                                                            @GetUpdateReasonText(context.Item.UpdateReason)
                                                        </CellTemplate>
                                                    </TemplateColumn>
                                                </Columns>
                                            </MudDataGrid>
                                        </MudPaper>
                                    </MudTabPanel>
                                    <MudTabPanel Text="Arquivos Ignorados">
                                        <MudPaper Class="pa-4" Outlined="true" Elevation="0">
                                            @if(fileCheckResponse.IgnoredFiles.Count > 0)
                                            {
                                                <MudDataGrid T="FileUpdateInfo" 
                                                             Items="@fileCheckResponse.IgnoredFiles" 
                                                             Filterable="true" 
                                                             FilterMode="DataGridFilterMode.Simple"
                                                             Dense="true" 
                                                             Bordered="true" 
                                                             Striped="true"
                                                             Hover="true"
                                                             Height="400px">
                                                    <Columns>
                                                        <PropertyColumn Property="x => x.RelativePath" Title="Caminho do Arquivo" />
                                                        <PropertyColumn Property="x => x.IgnoreReason" Title="Motivo" />
                                                    </Columns>
                                                </MudDataGrid>
                                            }
                                            else
                                            {
                                                <MudAlert Severity="Severity.Info">Não há arquivos ignorados.</MudAlert>
                                            }
                                        </MudPaper>
                                    </MudTabPanel>
                                </MudTabs>
                                
                                <div class="d-flex justify-center mt-4">
                                    <MudButton OnClick="UploadFiles" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" 
                                               Variant="Variant.Filled" Disabled="@isUploading">
                                        @if (isUploading)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Enviando...</MudText>
                                        }
                                        else
                                        {
                                            @("Enviar arquivos modificados")
                                        }
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    }
                    else if (analyzed)
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-4">Não há arquivos para atualizar.</MudAlert>
                        <MudButton OnClick="SelectFolder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Folder" 
                                   Variant="Variant.Outlined" Class="mt-4">
                            Selecionar outra pasta
                        </MudButton>
                    }
                }
                
                @if (!string.IsNullOrEmpty(message))
                {
                    <MudAlert Severity="@alertSeverity" Class="mt-3">@message</MudAlert>
                }
            </MudPaper>
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Text">Cancelar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; } = null!;
    [Parameter] public List<string>? PreSelectedSiteNames { get; set; }
    
    private bool folderSelected = false;
    private string selectedFolderName = string.Empty;
    private int fileCount = 0;
    private bool isAnalyzing = false;
    private bool isUploading = false;
    private bool analyzed = false;
    private string message = string.Empty;
    private Severity alertSeverity = Severity.Info;
    
    private List<SiteDto> AvailableSites { get; set; } = new();
    
    private List<ClientFileInfo> clientFiles = new();
    private FileCheckResponse? fileCheckResponse;
    private Dictionary<string, string> folderMap = new();
    
    private List<SiteSelectionItem> sites = new();
    private HashSet<string> SelectedSites => 
        PreSelectedSiteNames != null && PreSelectedSiteNames.Any() 
            ? PreSelectedSiteNames.ToHashSet() 
            : sites.Where(s => s.IsSelected).Select(s => s.Name).ToHashSet();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allSites = await SiteService.GetSitesAsync();
            sites = allSites.Select(s => new SiteSelectionItem { 
                Name = s.Name, 
                IsSelected = PreSelectedSiteNames != null && PreSelectedSiteNames.Contains(s.Name)
            }).ToList();
        }
        catch (Exception ex)
        {
            message = $"Erro ao carregar sites: {ex.ToString()}";
            alertSeverity = Severity.Error;
        }
    }
    
    private void Cancel()
    {
        MudDialog?.Cancel();
    }
    
    private async Task SelectFolder()
    {
        if (!SelectedSites.Any()) return;
        
        try
        {
            folderSelected = false;
            clientFiles.Clear();
            fileCheckResponse = null;
            message = string.Empty;
            analyzed = false;
            
            var result = await JSRuntime.InvokeAsync<FolderSelectionResult>("selectFolder");
            
            if (!result.Success)
            {
                message = "Não foi possível selecionar a pasta.";
                alertSeverity = Severity.Error;
                return;
            }
            
            folderSelected = true;
            selectedFolderName = result.FolderName;
            folderMap = result.FolderMap;
            fileCount = result.FileCount;
            
            clientFiles = result.Files;
            foreach (var file in clientFiles)
            {
                file.LastModified = file.LastModified.ToLocalTime();
            }
            await AnalyzeFiles();
        }
        catch (Exception ex)
        {
            message = $"Erro: {ex.ToString()}";
            alertSeverity = Severity.Error;
        }
    }
    
    private async Task AnalyzeFiles()
    {
        if (!SelectedSites.Any()) return;
        
        try
        {
            isAnalyzing = true;
            StateHasChanged();
            
            var allFilesToUpdate = new HashSet<string>();
            var allFiles = new List<FileUpdateInfo>();
            var allIgnoredFiles = new List<FileUpdateInfo>();
            
            foreach (var site in SelectedSites)
            {
                var siteResponse = await SiteService.CheckFilesForUpdateAsync(site, clientFiles);
                
                foreach (var file in siteResponse.FilesToUpdate)
                {
                    allFilesToUpdate.Add(file);
                }
                
                foreach (var file in siteResponse.Files)
                {
                    var existingFile = allFiles.FirstOrDefault(f => f.RelativePath == file.RelativePath);
                    if (existingFile == null)
                    {
                        allFiles.Add(file);
                    }
                }
                
                foreach (var file in siteResponse.IgnoredFiles)
                {
                    var existingIgnoredFile = allIgnoredFiles.FirstOrDefault(f => f.RelativePath == file.RelativePath);
                    if (existingIgnoredFile == null)
                    {
                        allIgnoredFiles.Add(file);
                    }
                }
            }
            
            fileCheckResponse = new FileCheckResponse
            {
                FilesToUpdate = allFilesToUpdate.ToList(),
                Files = allFiles,
                IgnoredFiles = allIgnoredFiles
            };
            
            isAnalyzing = false;
            analyzed = true;
        }
        catch (Exception ex)
        {
            isAnalyzing = false;
            message = $"Erro ao analisar arquivos: {ex.ToString()}";
            alertSeverity = Severity.Error;
        }
    }
    
    private async Task UploadFiles()
    {
        if (fileCheckResponse == null || fileCheckResponse.FilesToUpdate.Count == 0 || isUploading || !SelectedSites.Any()) return;
        
        try
        {
            isUploading = true;
            message = $"Enviando arquivos para {SelectedSites.Count} site(s)...";
            alertSeverity = Severity.Info;
            StateHasChanged();
            
            var filesToSend = new Dictionary<string, Stream>();
            var filesLastModified = new Dictionary<string, DateTime>();
            
            foreach (var filePath in fileCheckResponse.FilesToUpdate)
            {                 
                if(string.IsNullOrEmpty(filePath)){
                    continue;
                }
                
                if (folderMap.TryGetValue(filePath, out var infoJson))
                {
                    try 
                    {
                        var info = System.Text.Json.JsonSerializer.Deserialize<FolderItemInfo>(infoJson);
                        
                        if (info?.Type == "directory")
                        {
                            Console.WriteLine($"Ignorando diretório: {filePath}");
                            continue;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Erro ao verificar tipo do item {filePath}: {ex.ToString()}");
                    }
                }
                
                var fileContent = await JSRuntime.InvokeAsync<byte[]>("readFileFromFolder", filePath, folderMap);
                filesToSend.Add(filePath, new MemoryStream(fileContent));
                
                var clientFile = clientFiles.FirstOrDefault(f => f.RelativePath == filePath);
                if (clientFile != null)
                {
                    filesLastModified.Add(filePath, clientFile.LastModified.ToUniversalTime());
                }
            }
            
            try
            {
                await SiteService.UpdateSpecificFilesInMultipleSitesAsync(SelectedSites.ToList(), filesToSend, filesLastModified);
                message = $"Todos os {SelectedSites.Count} sites foram atualizados com sucesso.";
                alertSeverity = Severity.Success;
            }
            catch (Exception ex)
            {
                message = $"Erro ao atualizar os sites: {ex}";
                alertSeverity = Severity.Error;
            }
        }
        catch (Exception ex)
        {
            message = $"Erro ao enviar arquivos: {ex}";
            alertSeverity = Severity.Error;
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
    
    private class FolderSelectionResult
    {
        public bool Success { get; set; }
        public string FolderName { get; set; } = string.Empty;
        public int FileCount { get; set; }
        public List<ClientFileInfo> Files { get; set; } = new();
        public Dictionary<string, string> FolderMap { get; set; } = new();
    }

    private class FolderItemInfo
    {
        public string Type { get; set; } = string.Empty;
        public string Handle { get; set; } = string.Empty;
        public string DirHandle { get; set; } = string.Empty;
        public string FileName { get; set; } = string.Empty;
    }
    
    private class SiteSelectionItem
    {
        public string Name { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
    }

    private string GetUpdateReasonText(FileUpdateReason reason)
    {
        return reason switch
        {
            FileUpdateReason.FileNotExistsOnServer => "Arquivo não existe no servidor",
            FileUpdateReason.modifiedDateDifferent => "Data de modificação do arquivo é diferente",
            FileUpdateReason.DifferentSize => "Tamanho do arquivo é diferente",
            FileUpdateReason.Ignored => "Arquivo ignorado",
            _ => "Desconhecido"
        };
    }
} 
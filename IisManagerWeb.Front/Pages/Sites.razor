@page "/sites"
@rendermode RenderMode.InteractiveWebAssembly
@using Microsoft.Web.Administration
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Services
@using IisManagerWeb.Front.Components
@using IisManagerWeb.Shared.Models
@using MudBlazor
@using IisManagerWeb.Front.Services
@inject SiteService SiteService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gerenciador IIS - Sites</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4" @onkeydown="@KeyDown" @onkeyup="@KeyUp" tabindex="0">
    <MudText Typo="Typo.h4" Class="mb-4">Gerenciador de Sites IIS</MudText>

    <MudGrid>
        <!-- Lista de Sites/Grupos -->
        <MudItem xs="12" sm="4" md="3">
            <MudPaper Class="pa-3" Elevation="3">
                <MudStack>
                    <MudToggleGroup T="string" SelectionMode="SelectionMode.ToggleSelection"
                        @bind-Value="ListaSelecionada" Color="Color.Primary">
                        <MudToggleItem Value="@("Sites")" Text="Sites" />
                        <MudToggleItem Value="@("Grupos")" Text="Grupos" />
                    </MudToggleGroup>
                </MudStack>
                @if (ListaSelecionada == "Sites")
                {
                    <MudTextField Variant="Variant.Outlined" @bind-Value="searchString" Placeholder="Pesquisar sites..."
                        Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                        Class="mt-3 mb-3"></MudTextField>

                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                    else if (sites == null || !sites.Any())
                    {
                        <MudAlert Severity="Severity.Info">Nenhum site encontrado.</MudAlert>
                    }
                    else
                    {
                        <div @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true" style="width: 100%">
                            <MudList T="SiteDto" Clickable="true" Style="width: 100%">
                                @foreach (var site in filteredSites)
                                {
                                    <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true" Dense="true"
                                        class="mud-height-full mud-width-full">
                                        <ActivatorContent>
                                            <MudListItem T="SiteDto" Text="@site.Name" Icon="@GetSiteIcon(site.State)"
                                                IconColor="@GetSiteColor(site.State)" OnClick="@(() => SelectSite(site))"
                                                Class="@(IsSiteSelected(site) ? "mud-selected-item mud-primary-text mud-primary-hover" : "")" />
                                        </ActivatorContent>
                                        <ChildContent>
                                            @if (selectedSites.Count > 1)
                                            {
                                                <MudMenuItem OnClick="@(() => CreateGroupFromSelected())">
                                                    <MudIcon Icon="@Icons.Material.Filled.CreateNewFolder" Class="mr-2" />
                                                    Criar Grupo
                                                </MudMenuItem>
                                            }
                                            @if (selectedSites.Count == 1)
                                            {
                                                <MudMenuItem OnClick="@(() => StartSite(selectedSites[0]))">
                                                    <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" />
                                                    Iniciar
                                                </MudMenuItem>
                                                <MudMenuItem OnClick="@(() => StopSite(selectedSites[0]))">
                                                    <MudIcon Icon="@Icons.Material.Filled.Stop" Class="mr-2" />
                                                    Parar
                                                </MudMenuItem>
                                                <MudMenuItem OnClick="@(() => RestartSite(selectedSites[0]))">
                                                    <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" />
                                                    Reiniciar
                                                </MudMenuItem>

                                                <MudMenuItem OnClick="@OpenDialog">
                                                    <MudIcon Icon="@Icons.Material.Filled.Upload" Class="mr-2" />
                                                    Atualizar Arquivos
                                                </MudMenuItem>
                                                
                                                <MudMenuItem OnClick="@OpenFolderDialog">
                                                    <MudIcon Icon="@Icons.Material.Filled.Folder" Class="mr-2" />
                                                    Atualizar por Pasta
                                                </MudMenuItem>
                                            }
                                        </ChildContent>
                                    </MudMenu>
                                }
                            </MudList>
                        </div>
                    }


                    <MudButton OnClick="RefreshSites" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                        Class="mt-3">
                        <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" />
                        Atualizar
                    </MudButton>
                }
                else
                {
                    @if (isLoadingGroups)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                    else if (siteGroups == null || !siteGroups.Any())
                    {
                        <MudAlert Severity="Severity.Info">Nenhum grupo encontrado.</MudAlert>
                    }
                    else
                    {
                        <MudList T="SiteGroupDto" Clickable="true" Style="width: 100%">
                            @foreach (var group in siteGroups)
                            {
                                <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true" Dense="true"
                                    class="mud-height-full mud-width-full">
                                    <ActivatorContent>
                                        <MudListItem T="SiteGroupDto" Text="@group.Name" Icon="@Icons.Material.Filled.Folder"
                                            OnClick="@(() => SelectGroup(group))"
                                            Class="@(IsGroupSelected(group) ? "mud-selected-item mud-primary-text mud-primary-hover" : "")">
                                            <MudText Typo="Typo.body1">@group.Name</MudText>
                                            <MudText Typo="Typo.caption" Class="mt-1">
                                                @group.SiteNames.Count sites
                                            </MudText>
                                        </MudListItem>
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudMenuItem OnClick="@(() => StartGroup(group))">
                                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" />
                                            Iniciar Todos
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => StopGroup(group))">
                                            <MudIcon Icon="@Icons.Material.Filled.Stop" Class="mr-2" />
                                            Parar Todos
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => UpdateGroupFiles(group))">
                                            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Class="mr-2" />
                                            Atualizar Arquivos
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => EditGroup(group))">
                                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
                                            Editar
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteGroup(group))">
                                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" />
                                            Excluir
                                        </MudMenuItem>
                                    </ChildContent>
                                </MudMenu>
                            }
                        </MudList>
                    }
                }

            </MudPaper>
        </MudItem>

        <!-- Detalhes -->
        <MudItem xs="12" sm="8" md="9">
            @if (ListaSelecionada == "Sites")
            {
                @if (selectedSites.Count == 1)
                {
                    var selectedSite = selectedSites[0];
                    <MudGrid>
                        <!-- Informações do Site -->
                        <MudItem xs="12" md="6">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Informações do Site</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudList T="string" ReadOnly="true" Dense="true">
                                        <MudListItem Icon="@Icons.Material.Filled.Info">
                                            <MudText><b>ID:</b> @selectedSite.Id</MudText>
                                        </MudListItem>
                                        <MudListItem Icon="@Icons.Material.Filled.Settings">
                                            <MudText><b>Inicialização Automática:</b> @selectedSite.ServerAutoStart
                                            </MudText>
                                        </MudListItem>
                                        <MudListItem Icon="@Icons.Material.Filled.Api">
                                            <MudText><b>Estado:</b> @selectedSite.State</MudText>
                                        </MudListItem>
                                    </MudList>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- Aplicações do Site -->
                        <MudItem xs="12" md="6">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Aplicações</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @if (selectedSite.Applications.Any())
                                    {
                                        <MudTable Items="@selectedSite.Applications" Hover="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>Caminho</MudTh>
                                                <MudTh>Pool de Aplicação</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Caminho">@context.Path</MudTd>
                                                <MudTd DataLabel="Pool de Aplicação">@context.ApplicationPoolName</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudAlert Severity="Severity.Info">Nenhuma aplicação encontrada.</MudAlert>
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- Bindings do Site -->
                        <MudItem xs="12">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Bindings</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @if (selectedSite.Bindings.Any())
                                    {
                                        <MudTable Items="@selectedSite.Bindings" Hover="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>Protocolo</MudTh>
                                                <MudTh>Host</MudTh>
                                                <MudTh>Binding</MudTh>
                                                <MudTh>Endpoint</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Protocolo">@context.Protocol</MudTd>
                                                <MudTd DataLabel="Host">@(string.IsNullOrEmpty(context.Host) ? "*" : context.Host)
                                                </MudTd>
                                                <MudTd DataLabel="Binding">@context.BindingInformation</MudTd>
                                                <MudTd DataLabel="Endpoint">@context.EndPoint</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudAlert Severity="Severity.Info">Nenhum binding encontrado.</MudAlert>
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                }
                else if (selectedSites.Count > 1)
                {
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Sites Selecionados</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudList T="SiteDto" Dense="true">
                                    @foreach (var site in selectedSites)
                                    {
                                        <MudListItem T="SiteDto">
                                            <MudText>@site.Name</MudText>
                                            <MudText Typo="Typo.caption">Estado: @site.State</MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
            else
            {
                @if (selectedGroup != null)
                {
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Informações do Grupo</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudButton Color="Color.Primary" OnClick="@(() => StartGroup(selectedGroup))"
                                        StartIcon="@Icons.Material.Filled.PlayArrow">Iniciar Todos</MudButton>
                                    <MudButton Color="Color.Error" OnClick="@(() => StopGroup(selectedGroup))"
                                        StartIcon="@Icons.Material.Filled.Stop">Parar Todos</MudButton>
                                    <MudButton Color="Color.Secondary" OnClick="@(() => EditGroup(selectedGroup))"
                                        StartIcon="@Icons.Material.Filled.Edit">Editar</MudButton>
                                    <MudButton Color="Color.Error" OnClick="@(() => DeleteGroup(selectedGroup))"
                                        StartIcon="@Icons.Material.Filled.Delete">Excluir</MudButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudList T="string" Dense="true">
                                    <MudListItem>
                                        <MudText><b>Nome:</b> @selectedGroup.Name</MudText>
                                    </MudListItem>
                                    <MudListItem>
                                        <MudText><b>Criado em:</b> @selectedGroup.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                        </MudText>
                                    </MudListItem>
                                    @if (selectedGroup.LastModifiedAt.HasValue)
                                    {
                                        <MudListItem>
                                            <MudText><b>Última modificação:</b>
                                                @selectedGroup.LastModifiedAt.Value.ToString("dd/MM/yyyy HH:mm")</MudText>
                                        </MudListItem>
                                    }
                                </MudList>

                                <MudText Typo="Typo.h6" Class="mt-4">Sites no grupo:</MudText>
                                <MudTable Items="@GetGroupSites()" Hover="true" Striped="true">
                                    <HeaderContent>
                                        <MudTh>Nome</MudTh>
                                        <MudTh>Estado</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Nome">@context.Name</MudTd>
                                        <MudTd DataLabel="Estado">@context.State</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudItem>
    </MudGrid>
</MudContainer>



@code {
    private List<SiteDto> sites = new();
    private List<SiteDto> selectedSites = new();
    private List<SiteGroupDto> siteGroups = new();
    private SiteGroupDto? selectedGroup;
    private bool isLoading = true;
    private bool isLoadingGroups = true;
    private string searchString = "";
    private string ListaSelecionada = "Sites";
    private bool isCtrlPressed = false;
    private bool menuOpen { get; set; } = false;
    private string menuX = "0px";
    private string menuY = "0px";
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    private IEnumerable<SiteDto> filteredSites => (sites ?? new List<SiteDto>())
    .Where(s => string.IsNullOrWhiteSpace(searchString) ||
    s.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    .ToList();

    protected override async Task OnInitializedAsync()
    {
        await RefreshSites();
        await RefreshGroups();
    }

    private async Task OnRightClick(MouseEventArgs e)
    {
        if (!selectedSites.Any()) return;

        if (menuOpen)
        {
            CloseMenu();
        }

        menuX = $"{e.ClientX}px";
        menuY = $"{e.ClientY}px";

        menuOpen = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshSites()
    {
        try
        {
            isLoading = true;
            sites = await SiteService.GetSitesAsync();

            if (selectedSites.Count > 0)
            {
                var sitesIds = selectedSites.Select(s => s.Id).ToList();
                selectedSites = sites.Where(s => sitesIds.Contains(s.Id)).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar sites: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshGroups()
    {
        try
        {
            isLoadingGroups = true;
            siteGroups = await SiteService.GetSiteGroupsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar grupos: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingGroups = false;
        }
    }

    private void SelectSite(SiteDto site)
    {
        if (!isCtrlPressed)
        {
            selectedSites.Clear();
        }
        selectedSites.Add(site);
        StateHasChanged();
    }

    private void SelectGroup(SiteGroupDto group)
    {
        selectedGroup = group;
        StateHasChanged();
    }

    private bool IsSiteSelected(SiteDto site)
    {
        return selectedSites.Any(s => s.Id == site.Id);
    }

    private bool IsGroupSelected(SiteGroupDto group)
    {
        return selectedGroup?.Name == group.Name;
    }

    private void KeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Control")
        {
            isCtrlPressed = true;
        }
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Control")
        {
            isCtrlPressed = false;
        }
    }

    private void CloseMenu()
    {
        menuOpen = false;
        StateHasChanged();
    }

    private async Task StartSite(SiteDto site)
    {
        try
        {
            await SiteService.StartSiteAsync(site.Name);
            await RefreshSites();
            Snackbar.Add($"Site '{site.Name}' iniciado com sucesso", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao iniciar site: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseMenu();
        }
    }

    private async Task StopSite(SiteDto site)
    {
        try
        {
            await SiteService.StopSiteAsync(site.Name);
            await RefreshSites();
            Snackbar.Add($"Site '{site.Name}' parado com sucesso", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao parar site: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseMenu();
        }
    }

    private async Task RestartSite(SiteDto site)
    {
        try
        {
            await SiteService.RestartSiteAsync(site.Name);
            await RefreshSites();
            Snackbar.Add($"Site '{site.Name}' reiniciado com sucesso", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao reiniciar site: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseMenu();
        }
    }

    private async Task CreateGroupFromSelected()
    {
        var parameters = new DialogParameters
        {
            { "AvailableSites", sites },
            { "PreSelectedSiteNames", selectedSites.Select(s => s.Name).ToList() }
        };

        var dialog = await DialogService.ShowAsync<SiteGroupDialog>("Novo Grupo", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SiteGroupDto group)
        {
            try
            {
                await SiteService.CreateSiteGroupAsync(group);
                await RefreshGroups();
                Snackbar.Add($"Grupo '{group.Name}' criado com sucesso", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao criar grupo: {ex.Message}", Severity.Error);
            }
        }
        CloseMenu();
    }

    private async Task EditGroup(SiteGroupDto group)
    {
        var parameters = new DialogParameters
{
{ "IsEditing", true },
{ "ExistingGroupName", group.Name },
{ "AvailableSites", sites }
};

        var dialog = await DialogService.ShowAsync<SiteGroupDialog>("Editar Grupo", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SiteGroupDto updatedGroup)
        {
            try
            {
                await SiteService.UpdateSiteGroupAsync(group.Name, updatedGroup);
                await RefreshGroups();
                Snackbar.Add($"Grupo '{group.Name}' atualizado com sucesso", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao atualizar grupo: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteGroup(SiteGroupDto group)
    {
        if (group == null) return;

        var dialog = await DialogService.ShowMessageBox(
        "Excluir Grupo",
        $"Tem certeza que deseja excluir o grupo '{group.Name}'?",
        yesText: "Sim", noText: "Não");

        if (dialog == true)
        {
            try
            {
                await SiteService.DeleteSiteGroupAsync(group.Name);
                await RefreshGroups();
                Snackbar.Add($"Grupo '{group.Name}' excluído com sucesso", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir grupo: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task StartGroup(SiteGroupDto group)
    {
        try
        {
            await SiteService.StartSiteGroupAsync(group.Name);
            await RefreshSites();
            Snackbar.Add($"Todos os sites do grupo '{group.Name}' foram iniciados", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao iniciar sites do grupo: {ex.Message}", Severity.Error);
        }
    }

    private async Task StopGroup(SiteGroupDto group)
    {
        try
        {
            await SiteService.StopSiteGroupAsync(group.Name);
            await RefreshSites();
            Snackbar.Add($"Todos os sites do grupo '{group.Name}' foram parados", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao parar sites do grupo: {ex.Message}", Severity.Error);
        }
    }

    private List<SiteDto> GetGroupSites()
    {
        if (selectedGroup == null || sites == null) return new List<SiteDto>();
        return sites.Where(s => selectedGroup.SiteNames.Contains(s.Name)).ToList();
    }

    private string GetSiteIcon(ObjectState state)
    {
        return state switch
        {
            ObjectState.Started => Icons.Material.Filled.PlayArrow,
            ObjectState.Stopped => Icons.Material.Filled.Stop,
            ObjectState.Starting => Icons.Material.Filled.Refresh,
            ObjectState.Stopping => Icons.Material.Filled.Refresh,
            _ => Icons.Material.Filled.Help
        };
    }

    private Color GetSiteColor(ObjectState state)
    {
        return state switch
        {
            ObjectState.Started => Color.Success,
            ObjectState.Stopped => Color.Error,
            ObjectState.Starting => Color.Warning,
            ObjectState.Stopping => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task StartSelectedSites()
    {
        if (!selectedSites.Any()) return;

        // Primeiro fechamos o menu
        CloseMenu();

        try
        {
            foreach (var site in selectedSites.Where(s => s.State != ObjectState.Started))
            {
                await SiteService.StartSiteAsync(site.Name);
            }

            Snackbar.Add($"{selectedSites.Count} site(s) iniciado(s) com sucesso", Severity.Success);
            await RefreshSites();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao iniciar sites: {ex.Message}", Severity.Error);
        }
    }

    private async Task StopSelectedSites()
    {
        if (!selectedSites.Any()) return;

        // Primeiro fechamos o menu
        CloseMenu();

        try
        {
            foreach (var site in selectedSites.Where(s => s.State != ObjectState.Stopped))
            {
                await SiteService.StopSiteAsync(site.Name);
            }

            Snackbar.Add($"{selectedSites.Count} site(s) parado(s) com sucesso", Severity.Success);
            await RefreshSites();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao parar sites: {ex.Message}", Severity.Error);
        }
    }

    private async Task RestartSelectedSites()
    {
        if (!selectedSites.Any()) return;

        // Primeiro fechamos o menu
        CloseMenu();

        try
        {
            foreach (var site in selectedSites)
            {
                await SiteService.RestartSiteAsync(site.Name);
            }

            Snackbar.Add($"{selectedSites.Count} site(s) reiniciado(s) com sucesso", Severity.Success);
            await RefreshSites();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao reiniciar sites: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDialog()
    {
        if (selectedSites.Count != 1) return;

        // Fechamos o menu antes de abrir o diálogo
        CloseMenu();

        try
        {
            // Limpar possíveis diálogos pendentes
            await Task.Delay(100);

            // Parâmetros para o diálogo
            var parameters = new DialogParameters
            {
                ["SiteName"] = selectedSites[0].Name
            };

            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = false,
                MaxWidth = MaxWidth.ExtraSmall,
                NoHeader = true
            };

            // Abre o diálogo através do serviço, com await para garantir que o diálogo está pronto
            var dialog = await DialogService.ShowAsync<UpdateFilesDialog>("", parameters, options);

            try
            {
                // Aguarda o resultado do diálogo
                await dialog.Result;
            }
            catch (Exception)
            {
                // Ignora erros no resultado do diálogo
            }
            finally
            {
                // Atualiza os sites independente do resultado
                await RefreshSites();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar diálogo: {ex.Message}", Severity.Error);
            await RefreshSites();
        }
    }

    private async Task OpenFolderDialog()
    {
        if (selectedSites.Count != 1) return;

        // Fechamos o menu antes de abrir o diálogo
        CloseMenu();

        try
        {
            // Limpar possíveis diálogos pendentes
            await Task.Delay(100);

            // Parâmetros para o diálogo
            var parameters = new DialogParameters
            {
                ["SiteName"] = selectedSites[0].Name
            };

            // Configurações do diálogo - configurações mínimas para reduzir problemas
            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth = MaxWidth.ExtraExtraLarge,
                NoHeader = true
            };

            // Abre o diálogo através do serviço, com await para garantir que o diálogo está pronto
            var dialog = await DialogService.ShowAsync<UpdateFolderDialog>("", parameters, options);

            try
            {
                // Aguarda o resultado do diálogo
                await dialog.Result;
            }
            catch (Exception)
            {
                // Ignora erros no resultado do diálogo
            }
            finally
            {
                // Atualiza os sites independente do resultado
                await RefreshSites();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar diálogo: {ex.Message}", Severity.Error);
            await RefreshSites();
        }
    }

    private async Task OpenMultiSiteUpdateDialog()
    {
        try
        {
            // Limpar possíveis diálogos pendentes
            await Task.Delay(100);

            // Configurações do diálogo
            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                NoHeader = true
            };

            // Abre o diálogo através do serviço
            var dialog = await DialogService.ShowAsync<UpdateMultipleSitesDialog>("", options);

            try
            {
                // Aguarda o resultado do diálogo
                await dialog.Result;
            }
            catch (Exception)
            {
                // Ignora erros no resultado do diálogo
            }
            finally
            {
                // Atualiza os sites independente do resultado
                await RefreshSites();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar diálogo: {ex.Message}", Severity.Error);
            await RefreshSites();
        }
    }

    private async Task UpdateGroupFiles(SiteGroupDto group)
    {
        if (group == null || group.SiteNames.Count == 0) return;
        
        try
        {
            // Limpar possíveis diálogos pendentes
            await Task.Delay(100);

            // Configurações do diálogo
            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                NoHeader = true
            };
            
            // Parâmetros para o diálogo
            var parameters = new DialogParameters
            {
                ["PreSelectedSiteNames"] = group.SiteNames
            };

            // Abre o diálogo através do serviço
            var dialog = await DialogService.ShowAsync<UpdateMultipleSitesDialog>("", parameters, options);

            try
            {
                // Aguarda o resultado do diálogo
                await dialog.Result;
            }
            catch (Exception)
            {
                // Ignora erros no resultado do diálogo
            }
            finally
            {
                // Atualiza os sites independente do resultado
                await RefreshSites();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar diálogo: {ex.Message}", Severity.Error);
            await RefreshSites();
        }
    }
}
@namespace IisManagerWeb.Front.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Web.Administration
@using MudBlazor
@using IisManagerWeb.Shared.Models
@inject SiteService SiteService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@rendermode RenderMode.InteractiveWebAssembly

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Atualizar Arquivos do Site @SiteName</MudText>
        
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column gap-4">
            <MudPaper Class="pa-4" Elevation="0">
                @if (!folderSelected)
                {
                    <MudText>Selecione a pasta local contendo os arquivos do site.</MudText>
                    
                    <div class="d-flex flex-column align-center justify-center mt-4">
                        <MudButton OnClick="SelectFolder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Folder" 
                                  Variant="Variant.Filled" Class="mb-2">
                            Selecionar pasta
                        </MudButton>
                    </div>
                }
                else
                {
                    <MudText>Pasta selecionada: @selectedFolderName</MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">Total de arquivos: @fileCount</MudText>
                    
                    @if (isAnalyzing)
                    {
                        <div class="d-flex flex-column align-center mt-4">
                            <MudProgressCircular Indeterminate="true" />
                            <MudText Class="mt-2">Analisando arquivos...</MudText>
                        </div>
                    }
                    else if (filesToUpdate.Count > 0)
                    {
                        <MudText Typo="Typo.body2" Class="mt-2">Arquivos para atualizar: @filesToUpdate.Count</MudText>
                        <MudButton OnClick="UploadFiles" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" 
                                  Variant="Variant.Filled" Class="mt-4" Disabled="@isUploading">
                            @if (isUploading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Enviando...</MudText>
                            }
                            else
                            {
                                @("Enviar arquivos modificados")
                            }
                        </MudButton>
                    }
                    else if (analyzed)
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-4">Não há arquivos para atualizar.</MudAlert>
                        <MudButton OnClick="SelectFolder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Folder" 
                                   Variant="Variant.Outlined" Class="mt-4">
                            Selecionar outra pasta
                        </MudButton>
                    }
                }
                
                @if (!string.IsNullOrEmpty(message))
                {
                    <MudAlert Severity="@alertSeverity" Class="mt-3">@message</MudAlert>
                }
            </MudPaper>
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Text">Cancelar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; } = null!;
    [Parameter] public string SiteName { get; set; } = string.Empty;
    
    private bool folderSelected = false;
    private string selectedFolderName = string.Empty;
    private int fileCount = 0;
    private bool isAnalyzing = false;
    private bool isUploading = false;
    private bool analyzed = false;
    private string message = string.Empty;
    private Severity alertSeverity = Severity.Info;
    
    private List<ClientFileInfo> clientFiles = new();
    private List<string> filesToUpdate = new();
    private Dictionary<string, string> folderMap = new(); // Mapeia Handle -> Path
    
    // Método para fechar o diálogo
    private void Cancel()
    {
        MudDialog?.Cancel();
    }
    
    // Método para selecionar pasta
    private async Task SelectFolder()
    {
        try
        {
            folderSelected = false;
            clientFiles.Clear();
            filesToUpdate.Clear();
            message = string.Empty;
            analyzed = false;
            
            // Chama a API js para selecionar pasta
            var result = await JSRuntime.InvokeAsync<FolderSelectionResult>("selectFolder");
            
            if (!result.Success)
            {
                message = "Não foi possível selecionar a pasta.";
                alertSeverity = Severity.Error;
                return;
            }
            
            folderSelected = true;
            selectedFolderName = result.FolderName;
            folderMap = result.FolderMap;
            fileCount = result.FileCount;
            clientFiles = result.Files;
            await AnalyzeFiles();
        }
        catch (Exception ex)
        {
            message = $"Erro: {ex.Message}";
            alertSeverity = Severity.Error;
        }
    }
    
    // Método para analisar arquivos
    private async Task AnalyzeFiles()
    {
        try
        {
            isAnalyzing = true;
            message = "Analisando arquivos...";
            alertSeverity = Severity.Info;
            StateHasChanged();
            
            // Enviar lista de arquivos para o servidor para verificar quais precisam ser atualizados
            filesToUpdate = await SiteService.CheckFilesForUpdateAsync(SiteName, clientFiles);
            
            isAnalyzing = false;
            analyzed = true;
            
            if (filesToUpdate.Count > 0)
            {
                message = $"Encontrados {filesToUpdate.Count} arquivos para atualizar.";
                alertSeverity = Severity.Info;
            }
            else
            {
                message = "Não há arquivos para atualizar.";
                alertSeverity = Severity.Success;
            }
        }
        catch (Exception ex)
        {
            isAnalyzing = false;
            message = $"Erro ao analisar arquivos: {ex.Message}";
            alertSeverity = Severity.Error;
        }
    }
    
    // Método para fazer upload dos arquivos
    private async Task UploadFiles()
    {
        if (filesToUpdate.Count == 0 || isUploading) return;
        
        try
        {
            isUploading = true;
            message = "Enviando arquivos...";
            alertSeverity = Severity.Info;
            StateHasChanged();
            
            // Preparar os arquivos para envio
            var filesToSend = new Dictionary<string, Stream>();
            var filesLastModified = new Dictionary<string, DateTime>();
            
            foreach (var filePath in filesToUpdate)
            {                 
                if(filePath == ""){
                    continue;
                }
                
                // Verificar se é um diretório através do mapa de pastas
                if (folderMap.TryGetValue(filePath, out var infoJson))
                {
                    try 
                    {
                        var info = System.Text.Json.JsonSerializer.Deserialize<FolderItemInfo>(infoJson);
                        
                        // Pular diretórios, não precisamos enviar diretórios, apenas arquivos
                        if (info?.Type == "directory")
                        {
                            Console.WriteLine($"Ignorando diretório: {filePath}");
                            continue;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Erro ao verificar tipo do item {filePath}: {ex.Message}");
                    }
                }

                Console.WriteLine($"filePath: {filePath}");
                
                // Obter o conteúdo do arquivo via JS
                var fileContent = await JSRuntime.InvokeAsync<byte[]>("readFileFromFolder", filePath, folderMap);
                filesToSend.Add(filePath, new MemoryStream(fileContent));
                
                // Obter a data de modificação do arquivo
                var clientFile = clientFiles.FirstOrDefault(f => f.RelativePath == filePath);
                if (clientFile != null)
                {
                    filesLastModified.Add(filePath, clientFile.LastModified.ToUniversalTime());
                }
            }

            foreach (var file in filesLastModified)
            {
                Console.WriteLine($"file: {file.Key} - {file.Value}");
            }
            // Enviar os arquivos
            await SiteService.UpdateSpecificFilesAsync(SiteName, filesToSend, filesLastModified);
            
            message = "Arquivos atualizados com sucesso!";
            alertSeverity = Severity.Success;
            
            // Fechar o diálogo após um atraso
            await Task.Delay(1500);
            MudDialog?.Close(true);
        }
        catch (Exception ex)
        {
            message = $"Erro ao enviar arquivos: {ex.Message}";
            alertSeverity = Severity.Error;
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
    
    // Classe para receber o resultado da seleção de pasta
    private class FolderSelectionResult
    {
        public bool Success { get; set; }
        public string FolderName { get; set; } = string.Empty;
        public int FileCount { get; set; }
        public List<ClientFileInfo> Files { get; set; } = new();
        public Dictionary<string, string> FolderMap { get; set; } = new();
    }

    // Classe para deserializar informações do tipo de item
    private class FolderItemInfo
    {
        public string Type { get; set; } = string.Empty;
        public string Handle { get; set; } = string.Empty;
        public string DirHandle { get; set; } = string.Empty;
        public string FileName { get; set; } = string.Empty;
    }
} 
@page "/settings"
@using IisManagerWeb.Shared.Models
@using IisManagerWeb.Front.Services
@inject SettingsService SettingsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Configurações</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Configurações</MudText>

<MudPaper Class="pa-4 mb-4">
    <MudForm Model="@settings" @ref="form">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5" GutterBottom="true">Configurações Gerais</MudText>
                
                <MudTextField T="string" Label="Nome da Organização" 
                              @bind-Value="settings.OrganizationName" 
                              Required="true" RequiredError="Nome da organização é obrigatório" 
                              Class="mb-3"/>
                
                <MudSelect T="string" Label="Tema" @bind-Value="settings.Theme" Class="mb-3">
                    <MudSelectItem Value="@("light")">Claro</MudSelectItem>
                    <MudSelectItem Value="@("dark")">Escuro</MudSelectItem>
                    <MudSelectItem Value="@("system")">Sistema</MudSelectItem>
                </MudSelect>
                
                <MudSelect T="string" Label="Idioma" @bind-Value="settings.Language" Class="mb-3">
                    <MudSelectItem Value="@("pt-BR")">Português (Brasil)</MudSelectItem>
                    <MudSelectItem Value="@("en-US")">Inglês (EUA)</MudSelectItem>
                    <MudSelectItem Value="@("es-ES")">Espanhol</MudSelectItem>
                </MudSelect>
                
                <MudSwitch T="bool" Checked="settings.EnableNotifications" 
                           CheckedChanged="((value) => settings.EnableNotifications = value)"
                           Label="Ativar Notificações" Color="Color.Primary" 
                           Class="mb-3"/>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5" GutterBottom="true">Configurações do Servidor</MudText>
                
                <MudTextField T="int" Label="Intervalo de Atualização (milissegundos)" 
                              @bind-Value="settings.RefreshInterval"
                              Minimum="5" Maximum="300" Class="mb-3"/>
                
                <MudTextField T="int" Label="Limite de Conexões" 
                              @bind-Value="settings.ConnectionLimit"
                              Minimum="1" Maximum="1000" Class="mb-3"/>
                
                <MudTextField T="string" Label="URL do Servidor" 
                              @bind-Value="settings.ServerUrl" 
                              Required="true" RequiredError="URL do servidor é obrigatória"
                              Class="mb-3"/>
                
                <MudSwitch T="bool" Checked="settings.EnableLogging" 
                           CheckedChanged="((value) => settings.EnableLogging = value)"
                           Label="Ativar Logging" Color="Color.Primary" 
                           Class="mb-3"/>
                
                <MudSwitch T="bool" Checked="settings.EnableSSL" 
                           CheckedChanged="((value) => settings.EnableSSL = value)"
                           Label="Forçar SSL" Color="Color.Primary" 
                           Class="mb-3"/>
            </MudItem>
            
            <MudItem xs="12">
                <MudDivider Class="my-4"/>
                <MudText Typo="Typo.h5" GutterBottom="true">Arquivos para Ignorar</MudText>
                <MudText Typo="Typo.body2" Class="mb-3">
                    Adicione padrões de arquivos que devem ser ignorados durante a comparação de arquivos entre o cliente e servidor, 
                    similar ao .gitignore. Você pode usar padrões glob como "*.tmp", "logs/*", etc.
                </MudText>
                
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <MudTextField T="string" @bind-Value="newIgnorePattern" 
                                      Label="Padrão de arquivo para ignorar" FullWidth="true" 
                                      Class="mb-3" Placeholder="Ex: *.tmp, logs/*, .DS_Store"/>
                    </MudItem>
                    <MudItem xs="12" md="4" Class="d-flex align-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                   OnClick="AddIgnorePattern" Class="mb-2">
                            Adicionar Padrão
                        </MudButton>
                    </MudItem>
                </MudGrid>
                
                <MudPaper Class="pa-4 mb-4" Outlined="true" Style="max-height: 300px; overflow-y: auto">
                    @if (!settings.IgnoredFiles.Any())
                    {
                        <MudText Typo="Typo.body2" Class="mud-text-disabled">
                            Nenhum padrão de arquivo ignorado configurado.
                        </MudText>
                    }
                    else
                    {
                        <MudList T="string" Dense="true">
                            @foreach (var pattern in settings.IgnoredFiles)
                            {
                                <MudListItem T="string" Text="@pattern">
                                    <div class="d-flex">
                                        <MudText Class="flex-grow-1">@pattern</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                     Size="Size.Small" 
                                                     OnClick="@(() => RemoveIgnorePattern(pattern))" 
                                                     Color="Color.Error"/>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                          OnClick="SaveSettings" Class="mr-2" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Salvando...</MudText>
                    }
                    else
                    {
                        <MudText>Salvar</MudText>
                    }
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                          OnClick="ResetSettings">Redefinir</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudPaper>

@code {
    private MudForm form = null!;
    private ManagerSettings settings = new();
    private string newIgnorePattern = string.Empty;
    private bool isSaving = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Carrega as configurações do servidor
            settings = await SettingsService.GetSettingsAsync();
        }
        catch (Exception ex)
        {
            // Em caso de erro, usa as configurações padrão
            Console.WriteLine($"Erro ao carregar configurações: {ex.Message}");
            settings = new ManagerSettings();
        }
    }
    
    private void AddIgnorePattern()
    {
        if (string.IsNullOrWhiteSpace(newIgnorePattern))
            return;
            
        // Evitar duplicatas
        if (!settings.IgnoredFiles.Contains(newIgnorePattern))
        {
            settings.IgnoredFiles.Add(newIgnorePattern);
        }
        
        newIgnorePattern = string.Empty;
    }
    
    private void RemoveIgnorePattern(string pattern)
    {
        settings.IgnoredFiles.Remove(pattern);
    }
    
    private async Task SaveSettings()
    {
        await form.Validate();
        
        if (form.IsValid)
        {
            try
            {
                isSaving = true;
                // Salva as configurações no servidor
                await SettingsService.SaveSettingsAsync(settings);
                
                Snackbar.Add("Configurações salvas com sucesso!", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao salvar configurações: {ex.Message}", Severity.Error);
            }
            finally
            {
                isSaving = false;
            }
        }
    }
    
    private void ResetSettings()
    {
        settings = new ManagerSettings
        {
            OrganizationName = "Minha Empresa",
            Theme = "light",
            Language = "pt-BR",
            EnableNotifications = true,
            RefreshInterval = 30,
            ConnectionLimit = 100,
            ServerUrl = "https://localhost:5001",
            EnableLogging = true,
            EnableSSL = true,
            IgnoredFiles = new List<string>()
        };
    }
} 
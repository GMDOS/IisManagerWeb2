@namespace IisManagerWeb.Front.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Web.Administration
@using MudBlazor
@inject SiteService SiteService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IUploadFileService UploadFileService
@rendermode RenderMode.InteractiveWebAssembly

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Atualizar Arquivos do Site @SiteName</MudText>
        
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column gap-4">
            <MudPaper Class="pa-4" Elevation="0">
                <MudText>Selecione o arquivo ZIP contendo os novos arquivos do site.</MudText>
                
                <div class="d-flex flex-column align-center justify-center mt-4">
                    <InputFile id="fileInput" OnChange="OnInputFileChanged" hidden accept=".zip" />
                    <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" 
                              Variant="Variant.Filled" Class="mb-2">
                        Selecionar arquivo
                    </MudButton>
                    
                    @if (file != null)
                    {
                        <MudText Typo="Typo.body1">@file.Name (@(Math.Round((double)file.Size / 1024, 2)) KB)</MudText>
                    }
                    
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <MudAlert Severity="@alertSeverity" Class="mt-3">@message</MudAlert>
                    }
                </div>
            </MudPaper>
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Text">Cancelar</MudButton>
        <MudButton OnClick="Upload" Color="Color.Primary" Variant="Variant.Filled" 
                  Disabled="@(file == null || isUploading)">
            @if (isUploading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Enviando...</MudText>
            }
            else
            {
                @("Enviar")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string SiteName { get; set; } = string.Empty;
    
    private IBrowserFile? file;
    private bool isUploading;
    private string message = string.Empty;
    private Severity alertSeverity = Severity.Info;
    
    // Método chamado quando um arquivo é selecionado
    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        file = e.File;
        StateHasChanged();
    }
    
    // Método para fechar o diálogo
    private void Cancel()
    {
        // Usa o método Cancel do MudDialog para fechar o diálogo
        MudDialog?.Cancel();
    }
    
    // Método para processar o upload do arquivo
    private async Task Upload()
    {
        if (file == null || isUploading) return;
        
        isUploading = true;
        message = string.Empty;
        StateHasChanged();
        
        try
        {
            // Upload de arquivo - tamanho máximo 100MB
            using var stream = file.OpenReadStream(100 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;
            
            var result = await UploadFileService.UploadFileAsync(SiteName, ms, file.Name);
            
            if (result.Succeeded)
            {
                message = "Arquivo enviado com sucesso!";
                alertSeverity = Severity.Success;
                
                // Aguarda um pequeno delay antes de fechar
                await Task.Delay(1000);
                MudDialog?.Close(true);
            }
            else
            {
                message = $"Erro: {result.Errors?.FirstOrDefault() ?? "Falha ao enviar o arquivo."}";
                alertSeverity = Severity.Error;
            }
        }
        catch (Exception ex)
        {
            message = $"Erro: {ex.Message}";
            alertSeverity = Severity.Error;
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
} 